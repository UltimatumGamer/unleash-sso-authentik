version: "3.9"
services:
  web:
    build:
      context: ./unleash-server
      dockerfile: Dockerfile
    ports:
      - "4242:4242"
    environment:
      # This points Unleash to its backing database (defined in the `db` section below)
      DATABASE_URL: "postgres://postgres:unleash@db/db"
      # Disable SSL for database connections. @chriswk: why do we do this?
      DATABASE_SSL: "false"
      # Changing log levels:
      LOG_LEVEL: "warn"

#     # Unleash Default User configuration
      UNLEASH_DEFAULT_ADMIN_USERNAME: "admin" 
      UNLEASH_DEFAULT_ADMIN_PASSWORD: "password"

      # Unleash Proxy configuration
      # Proxy clients must use one of these keys to connect to the
      # Proxy. To add more keys, separate them with a comma (`key1,key2`).
      INIT_FRONTEND_API_TOKENS: "default:development.unleash-insecure-frontend-api-token"
      # Initialize Unleash with a default set of client API tokens. To
      # initialize Unleash with multiple tokens, separate them with a
      # comma (`token1,token2`).
      INIT_CLIENT_API_TOKENS: "default:development.unleash-insecure-api-token"

      # Authentik OpenID Connect configuration
      UNLEASH_HOST: "https://unleash.company"
      AUTH_HOST: "https://authentik.company"
      AUTH_SLUG: "unleash"
      AUTH_CLIENT_ID: "xxx"
      AUTH_CLIENT_SECRET: "xxx"
    depends_on:
      db:
        condition: service_healthy
    command: [ "node", "index.js" ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s
  db:
    image: postgres:15
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./data:/var/lib/postgresql/data
    environment:
      # create a database called `db`
      POSTGRES_DB: "db"
      # create a user called `postgres` with password `password`
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      # trust incoming connections blindly (DON'T DO THIS IN PRODUCTION!)
      POSTGRES_HOST_AUTH_METHOD: "trust"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=postgres",
          "--host=127.0.0.1",
          "--port=5432"
        ]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s